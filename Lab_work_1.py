from abc import ABC, abstractmethod

class MaterialObject(ABC):
    def __init__(self, name: str, weight: float):
        '''
        Конструктор класса Материальный объект.

        Аргументы:
        - name (str): название материального объекта
        - weight (float): масса материального объекта

        Проверка аргументов:
        - name: должно быть строкой
        - weight: должно быть числом
        '''
        pass

    @abstractmethod
    def move(self, new_location: str):
        '''
        Метод, описывающий перемещение материального объекта в новое место.

        Аргументы:
        - new_location (str): новое место, куда нужно переместить объект

        Возвращаемое значение: отсутствует
        '''
        pass

    @abstractmethod
    def change_weight(self, new_weight: float):
        '''
        Метод, описывающий изменение массы материального объекта.

        Аргументы:
        - new_weight (float): новая масса объекта

        Возвращаемое значение: отсутствует
        '''
        pass

    @abstractmethod
    def calculate_volume(self):
        '''
        Метод, описывающий вычисление объема материального объекта.

        Возвращаемое значение: объем объекта (float)
        '''
        pass


"""
Абстрактный
класс
"Дерево":
"""
class Tree(ABC):
    def __init__(self, age: int, height: float):
        '''
        Конструктор класса Дерево.

        Аргументы:
        - age (int): возраст дерева
        - height (float): высота дерева

        Проверка аргументов:
        - age: должно быть целым числом
        - height: должно быть числом
        '''
        pass

    @abstractmethod
    def grow(self):
        """
        Метод, описывающий рост дерева.
        Возвращаемое значение: отсутствует
        """
        pass

    @abstractmethod
    def shed_leaves(self):
        """
        Метод, описывающий опадение листьев с дерева.

        Возвращаемое значение: отсутствует
        """
        pass

    @abstractmethod
    def calculate_age(self, current_year: int):
        '''
        Метод, описывающий вычисление текущего возраста дерева.

        Аргументы:
        - current_year (int): текущий год

        Возвращаемое значение: текущий возраст дерева (int)
        '''
        pass


"""
Абстрактный
класс
"Социальная сеть":
"""
class SocialNetwork(ABC):
    def __init__(self, name: str, users: int):
        '''
        Конструктор класса Социальная сеть.

        Аргументы:
        - name (str): название социальной сети
        - users (int): количество пользователей сети

        Проверка аргументов:
        - name: должно быть строкой
        - users: должно быть целым числом
        '''
        pass

    @abstractmethod
    def add_user(self, username: str):
        '''
        Метод, описывающий добавление нового пользователя в социальную сеть.

        Аргументы:
        - username (str): имя нового пользователя

        Возвращаемое значение: отсутствует
        '''
        pass

    @abstractmethod
    def remove_user(self, username: str):
        '''
        Метод, описывающий удаление пользователя из социальной сети.

        Аргументы:
        - username (str): имя удаляемого пользователя

        Возвращаемое значение: отсутствует
        '''
        pass

    @abstractmethod
    def get_user_count(self):
        '''
        Метод, возвращающий количество пользователей в социальной сети.

        Возвращаемое значение: количество пользователей (int)
        '''
        pass

"""
Пример
использования
метода
`move()`
класса
"Материальный объект":
"""
table = MaterialObject("Стол", 30)
table.move("Комната 1")
